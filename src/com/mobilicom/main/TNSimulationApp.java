package com.mobilicom.main;

import com.mobilicom.csv.CSVRW;
import com.mobilicom.csv.FlyCoordinates;
import com.mobilicom.csv.LinePoint;
import com.mobilicom.csv.RouteDetail;
import com.mobilicom.csv.RouteDrawing;
import com.mobilicom.csv.SimuTestSetting;
import static com.mobilicom.mcip.TCPServer.setGETGPSINFO;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;
import javax.swing.Box;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dhiraj
 */
public class TNSimulationApp extends javax.swing.JFrame {
    private Component target;
    private boolean drawing = true;
    GeneralPath path = null;
    private Point p1=null ;
    private Point p2=null;
    private Point startPoint=null;
    int  cgsHomeX;
    int cgsHomeY;
    private ArrayList<Line2D> line2ds=new ArrayList<>();
    private ArrayList<Point> cgspoint=new ArrayList<>();
    private List<RouteDetail> routeDetails=new ArrayList<>();
    Line2D line2d;
    private volatile boolean running = true;
    private volatile boolean paused = false;
    Iterator<Point2D> it=null;
    int forwardValues=5000;
    int totalCount=1;
    int totalPoint=0;
    int x1,y1,x2,y2;
    double totalDistance;
    String playStartTime;
    boolean airfanAddStatus=false;
    private long lasttick = 0L;
    private long elapsed = 0L;
    private static final String RESETTIME = buildTime(0);
    JLabel designDetailsFile=new JLabel();
    private Point startPoint1=null;
    private  boolean gdtLocation=false;
    private boolean testliststatus=true;
    private int wayPointCount=1;
    private File fileToLocation ;
    private String testListFilePath="";
    private String routeDesignPath="";
    private List<SimuTestSetting> simuTestSettings=new ArrayList<>();
    Double tile2lon;
    Double tile2lat;
private final ReentrantLock lock = new ReentrantLock();
    /**
     * Creates new form NewMDIApplication
     */
    public TNSimulationApp() {
         
        initComponents();
        timeLeft.setText(RESETTIME);
        timeLeft.setEditable(false);
        Font bigFont = timeLeft.getFont().deriveFont(Font.PLAIN, 13f);
        timeLeft.setFont(bigFont);
         
       // startTCPServer();
                  
        
    }
       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tnssettings = new javax.swing.JPanel();
        testOptionList = new javax.swing.JComboBox<>();
        testPlayerPan = new javax.swing.JPanel();
        forwardButton = new javax.swing.JButton();
        forwardText = new javax.swing.JTextField();
        playButton = new javax.swing.JButton();
        startstoptime = new javax.swing.JLabel();
        flightProgressBar = new javax.swing.JProgressBar();
        paytimedetails = new javax.swing.JLabel();
        forwardButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        gcsAntenna = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        adtAntennaComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        maxDeviationEI = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        maxDeviationAz = new javax.swing.JTextField();
        maxDeviationGain = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        motorWorkTimeText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        timeLeft = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        testListdata = new javax.swing.JList<>();
        saveTestList = new javax.swing.JButton();
        loadroute = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        saveroute = new javax.swing.JButton();
        loadTestListButton1 = new javax.swing.JButton();
        maxSensitivity = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        mapGride = new MapGridView();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mobilicom Flight Simulation");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showPopupMenu(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                addGride(evt);
            }
        });

        tnssettings.setBackground(new java.awt.Color(117, 159, 204));
        tnssettings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        tnssettings.setForeground(new java.awt.Color(204, 204, 255));
        tnssettings.setMaximumSize(new java.awt.Dimension(200, 32767));
        tnssettings.setMinimumSize(new java.awt.Dimension(200, 0));
        tnssettings.setPreferredSize(new java.awt.Dimension(200, 1106));
        tnssettings.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tnssettingsKeyPressed(evt);
            }
        });

        testOptionList.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        testOptionList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Test Player", "Post Test Analysis", "Real Screnario Log Player" }));
        testOptionList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testOptionListActionPerformed(evt);
            }
        });

        testPlayerPan.setBackground(new java.awt.Color(102, 102, 102));

        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/forward.png"))); // NOI18N
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        forwardText.setText("16");
        forwardText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardTextActionPerformed(evt);
            }
        });
        forwardText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                forwardTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                forwardTextKeyTyped(evt);
            }
        });

        playButton.setBackground(new java.awt.Color(255, 255, 255));
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/104-24.png"))); // NOI18N
        playButton.setActionCommand("play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        startstoptime.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N

        paytimedetails.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        forwardButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/stop.png"))); // NOI18N
        forwardButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testPlayerPanLayout = new javax.swing.GroupLayout(testPlayerPan);
        testPlayerPan.setLayout(testPlayerPanLayout);
        testPlayerPanLayout.setHorizontalGroup(
            testPlayerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPlayerPanLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(testPlayerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testPlayerPanLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(startstoptime, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(testPlayerPanLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forwardButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forwardText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(paytimedetails, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(testPlayerPanLayout.createSequentialGroup()
                .addComponent(flightProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        testPlayerPanLayout.setVerticalGroup(
            testPlayerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPlayerPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flightProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 10, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testPlayerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testPlayerPanLayout.createSequentialGroup()
                        .addComponent(startstoptime)
                        .addGap(2, 2, 2)
                        .addGroup(testPlayerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paytimedetails, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(forwardText, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, testPlayerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(forwardButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(forwardButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(playButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        forwardButton.getAccessibleContext().setAccessibleDescription("");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setText("GCS Antenna");

        gcsAntenna.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        gcsAntenna.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "24dBi Parabolic Antenna", "21dBi Parabolic", "15dBi Directional" }));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel3.setText("ADT Antenna");

        adtAntennaComboBox.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        adtAntennaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose ADT Antenna", "5dBi Laird Antenna", "2.5 Omni", "5 Omni" }));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel4.setText("Max.Deviation E I");

        maxDeviationEI.setText("2");
        maxDeviationEI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDeviationEI(evt);
            }
        });
        maxDeviationEI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxDeviationEIKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel6.setText("Az");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel7.setText("Gain");

        maxDeviationAz.setText("4");
        maxDeviationAz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDeviationAzActionPerformed(evt);
            }
        });
        maxDeviationAz.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxDeviationAzKeyTyped(evt);
            }
        });

        maxDeviationGain.setText("3");
        maxDeviationGain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDeviationGainActionPerformed(evt);
            }
        });
        maxDeviationGain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxDeviationGainKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel8.setText("Time left to test");

        motorWorkTimeText.setEditable(false);
        motorWorkTimeText.setText("00:00:00:00");
        motorWorkTimeText.setToolTipText("");
        motorWorkTimeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorWorkTimeTextActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel10.setText("Motor Work Time");

        timeLeft.setText("00:00:00:00");
        timeLeft.setToolTipText("");
        timeLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeLeftActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel12.setText("Test List ");

        testListdata.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        testListdata.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                testListdataValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(testListdata);

        saveTestList.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        saveTestList.setText("Save Test List");
        saveTestList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTestListActionPerformed(evt);
            }
        });

        loadroute.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        loadroute.setText("Load Route");
        loadroute.setToolTipText("");
        loadroute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadrouteActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel13.setText("Max Sensitivity (-dBm)");

        saveroute.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        saveroute.setText("Save  Route");
        saveroute.setActionCommand("saveroute");
        saveroute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saverouteActionPerformed(evt);
            }
        });

        loadTestListButton1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        loadTestListButton1.setText("Load Test List");
        loadTestListButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTestListButton1ActionPerformed(evt);
            }
        });

        maxSensitivity.setToolTipText("");
        maxSensitivity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxSensitivityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tnssettingsLayout = new javax.swing.GroupLayout(tnssettings);
        tnssettings.setLayout(tnssettingsLayout);
        tnssettingsLayout.setHorizontalGroup(
            tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tnssettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tnssettingsLayout.createSequentialGroup()
                        .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(testPlayerPan, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(gcsAntenna, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(testOptionList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(adtAntennaComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tnssettingsLayout.createSequentialGroup()
                                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(tnssettingsLayout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(maxDeviationEI, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(maxDeviationAz, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(maxDeviationGain, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(motorWorkTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(tnssettingsLayout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(39, 39, 39)
                                                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(maxSensitivity)
                                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(682, 682, 682))
                    .addGroup(tnssettingsLayout.createSequentialGroup()
                        .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tnssettingsLayout.createSequentialGroup()
                                .addComponent(loadTestListButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveTestList, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(timeLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tnssettingsLayout.createSequentialGroup()
                                .addComponent(loadroute, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveroute, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tnssettingsLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jLabel5)
                    .addContainerGap(922, Short.MAX_VALUE)))
        );
        tnssettingsLayout.setVerticalGroup(
            tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tnssettingsLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(testOptionList, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(testPlayerPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gcsAntenna, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adtAntennaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(maxDeviationEI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(maxDeviationAz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(maxDeviationGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motorWorkTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveroute, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadroute, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTestList, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadTestListButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(tnssettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tnssettingsLayout.createSequentialGroup()
                    .addContainerGap(1003, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(68, 68, 68)))
        );

        mapGride.setBackground(new java.awt.Color(207, 220, 236));
        mapGride.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        mapGride.setMinimumSize(new java.awt.Dimension(1024, 1));
        mapGride.setPreferredSize(new java.awt.Dimension(1024, 1024));
        mapGride.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mouseDraggedOnGridMap(evt);
            }
        });
        mapGride.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClickedOnGridView(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mousePressedONGridMap(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MouseReleasedONGridMap(evt);
            }
        });
        mapGride.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(10, 1024));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1020, Short.MAX_VALUE)
        );

        mapGride.add(jPanel2);
        jPanel2.setBounds(0, 0, 10, 1020);

        jScrollPane2.setViewportView(mapGride);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(1024, 10));
        jPanel3.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tnssettings, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(tnssettings, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
                             
        
    }//GEN-LAST:event_formComponentAdded

    private void addGride(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_addGride
       
    }//GEN-LAST:event_addGride

    private void showPopupMenu(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPopupMenu
          // TODO add your handling code here:
          System.out.println("");
    }//GEN-LAST:event_showPopupMenu
      public void stop() {
         running = false;
        // resume();
       
    }
    public void pause() {
        System.out.print("=======pause=========");
        //you may want to throw an IllegalStateException if !running
        paused = true;
    }
    public void resume() {
        System.out.print("========resume=========");
        synchronized (it) {
            paused = false;
            it.notifyAll(); // Unblocks thread
        }
    }
    private void MouseReleasedONGridMap(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseReleasedONGridMap
         target = null;
            Container container = (Container) evt.getComponent();
            for (Component c : container.getComponents()) {
               try{
                      if(c.getName()!=null &&c.getName().contains("cgshome")){
                          JLabel  jLabel=(JLabel) c;   
                          String str[] =jLabel.getText().split("<br>");
                          String strTemp=str[0];
                          strTemp=strTemp+"<br>"+str[1];
                          strTemp=strTemp+"<br>Latitude:"+jLabel.getX();
                          strTemp=strTemp+"<br>Longitude:"+jLabel.getY();
                          strTemp=strTemp+"<br>"+str[4];
                          strTemp=strTemp+"<br>"+str[5];     
                          jLabel.setText(strTemp);
                          //jLabel.setName(jLabel.getName());
                          repaint();
                          System.out.println("com.mobilicom.main.TNSimulationApp.MouseReleasedONGridMap()"+jLabel.getText());
                     }
                 
              }catch(Exception ex){
              
              }
            } 
        //System.out.println("line2ds.add(new Line2D.Double(endPoint,startPoint));");
    }//GEN-LAST:event_MouseReleasedONGridMap

    private void mousePressedONGridMap(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mousePressedONGridMap
       if(drawing){
        Container container = (Container) evt.getComponent();
        for (Component c : container.getComponents()) {
            if (c.getBounds().contains(evt.getPoint())) {
                target = c;
                break;
            }
        } 
       }
      
    }//GEN-LAST:event_mousePressedONGridMap

    private void mouseClickedOnGridView(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClickedOnGridView
       
        
       
    }//GEN-LAST:event_mouseClickedOnGridView
    private void mouseDraggedOnGridMap(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseDraggedOnGridMap
        if (target != null && drawing) {
            target.setBounds(evt.getX(), evt.getY(), target.getWidth(), target.getHeight());
            
              
         //} 
            evt.getComponent().repaint();
        }
      
       
    }//GEN-LAST:event_mouseDraggedOnGridMap

    private void tnssettingsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tnssettingsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tnssettingsKeyPressed

    private void loadrouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadrouteActionPerformed
          try {
                    JFileChooser fileChooser = new JFileChooser();
                    add(fileChooser);
                    fileChooser.setDialogTitle("Specify a file to open");
                    fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                    fileChooser.setFileFilter(new FileNameExtensionFilter("csv","csv"));
                    int userSelection = fileChooser.showOpenDialog(null);
                    if (userSelection == JFileChooser.APPROVE_OPTION) {
                        fileToLocation= fileChooser.getSelectedFile();
                        CSVRW csvWriter=new CSVRW();
                        routeDesignPath=fileToLocation.getAbsolutePath();
                        RouteDrawing routeDrawing =csvWriter.getRouteDettail(routeDesignPath); 
                        int totalPoint=1;
                        for(RouteDetail routeDetail:routeDrawing.getRouteDetails()){
                              //CGS HOME
                              if(routeDetail.getComponentName().contains("cgshome1")){
                                    javax.swing.JLabel GDTLocation = new javax.swing.JLabel();     
                                    GDTLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/rss-house _64.png"))); // NOI18N
                                    GDTLocation.setBounds(110, 130, 150, 160);
                                    GDTLocation.setVerticalTextPosition(JLabel.TOP);
                                    GDTLocation.setHorizontalTextPosition(JLabel.CENTER);
                                    GDTLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                                    GDTLocation.setName(routeDetail.getComponentName());
                                    GDTLocation.setText(routeDetail.getComponentText());
                                    Point point=new Point();
                                    point.setLocation(routeDetail.getxPoint()-90,routeDetail.getyPoint()-140);
                                    GDTLocation.setLocation(point);
                                   // point.setLocation(routeDetail.getxPoint(),routeDetail.getyPoint());
                                    //p1=point;
                                   // startPoint=point;
                                   // startPoint1=point;
                                    repaint();
                                    mapGride.add(GDTLocation);
                                   // gdtLocation=true;
                         } else{ if(routeDetail.getComponentName().contains("wayPoint")){
                            javax.swing.JLabel wayPoint = new javax.swing.JLabel();     
                            wayPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/airport-48.png"))); // NOI18N
                            wayPoint.setBounds(220, 320, 64, 64);
                            wayPoint.setName("wayPoint"+wayPointCount);
                            Point point=new Point();
                            point.setLocation(routeDetail.getxPoint()-32,routeDetail.getyPoint()-32);
                            wayPoint.setLocation(point);
                            wayPoint.setText(wayPointCount+"");
                            //point.setLocation(routeDetail.getxPoint()+20,routeDetail.getyPoint()+20.0);
                            /*if(p2==null){
                                 p2=point;
                             }else{
                                p1=p2;
                                p2=point;
                            }
                            line2d = new Line2D.Double(p1,p2);
                            line2ds.add(line2d);
                            if(totalPoint==routeDrawing.getRouteDetails().size()){
                                  line2ds.add(new Line2D.Double(point,startPoint));
                           } */
                            wayPointCount=wayPointCount+1;
                            mapGride.add(wayPoint);
                            totalPoint=totalPoint+1;
                            repaint();
                         }else{
                                javax.swing.JLabel GDTLocation = new javax.swing.JLabel();     
                                GDTLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/rss-house _64.png"))); // NOI18N
                                GDTLocation.setBounds(110, 130, 150, 160);
                                GDTLocation.setVerticalTextPosition(JLabel.TOP);
                                GDTLocation.setHorizontalTextPosition(JLabel.CENTER);
                                GDTLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                                GDTLocation.setName(routeDetail.getComponentName());
                                GDTLocation.setText(routeDetail.getComponentText());
                                GDTLocation.setToolTipText("loadedRoute");
                                Point point=new Point();
                                point.setLocation(routeDetail.getxPoint()-90,routeDetail.getyPoint()-140);
                                GDTLocation.setLocation(point);
                                point.setLocation(routeDetail.getxPoint(),routeDetail.getyPoint());
                                mapGride.add(GDTLocation);
                                repaint();
                         }
                         }
                        
                       }
                        
                       
                    } 
                     JOptionPane.showMessageDialog(null, "Please Draw Route",  "Mobilicom Flight Simulation", 1);
                }catch(HeadlessException ex) {

              }        // TODO add your handling code here:
    }//GEN-LAST:event_loadrouteActionPerformed

    private void saveTestListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTestListActionPerformed
            try {
                  
                  SimuTestSetting simuTestSetting= new SimuTestSetting();
                  simuTestSetting.setSrNo(1);
                  //Get test name 
                  String str =JOptionPane.showInputDialog(null, "Enter Test List Name : ","Mobilicom Flight Simulation", 1);
                  if(str != null){
                      JOptionPane.showMessageDialog(null, "Enter Test List Name : " + str,  "Mobilicom Flight Simulation", 1);
                      simuTestSetting.setForwardX(Integer.valueOf(forwardText.getText()));
                  String gcsAntennaName = gcsAntenna.getSelectedItem().toString();
                  simuTestSetting.setGCSAntenna(gcsAntennaName);
                  simuTestSetting.setTestSettingName(str); 
                  String adtAntennaComboBoxName = adtAntennaComboBox.getSelectedItem().toString();
                  simuTestSetting.setADTAntenna(adtAntennaComboBoxName);
                  simuTestSetting.setMaxDeviationAz(Integer.valueOf(maxDeviationAz.getText()));
                  simuTestSetting.setMaxDeviationEl(Integer.valueOf(maxDeviationEI.getText()));
                  simuTestSetting.setMaxDeviationGa(Integer.valueOf(maxDeviationGain.getText()));
                  if(!"".equals(maxSensitivity.getText())){
                   simuTestSetting.setMaxSensitivity(Integer.valueOf(maxSensitivity.getText()));
                  }
                  simuTestSettings.add(simuTestSetting);
                  loadTestList(simuTestSettings);
                  CSVRW csvrw=new CSVRW();
                  if(testliststatus){
                        JFileChooser fileChooser = new JFileChooser();
                        add(fileChooser);
                        fileChooser.setDialogTitle("Specify a file to save");
                        fileChooser.setFileFilter(new FileNameExtensionFilter("csv","csv"));
                        int userSelection =  fileChooser.showSaveDialog(this); 
                        if (userSelection == JFileChooser.APPROVE_OPTION) {
                                testListFilePath=fileChooser.getSelectedFile().getPath()+".csv";
                                csvrw.saveTestSettingDetails(simuTestSettings,testListFilePath);
                               
                        }
                        testliststatus=false;
                        
                    }else{
                     csvrw.saveTestSettingDetails(simuTestSettings,testListFilePath);
                  }  
                   } else{
                       JOptionPane.showMessageDialog(null, "You pressed cancel button.", "Mobilicom Flight Simulation", 1);
                  }      
                  
               }catch(HeadlessException ex){
                    ex.printStackTrace();
           }              
       
    }//GEN-LAST:event_saveTestListActionPerformed

    private void timeLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeLeftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeLeftActionPerformed

    private void motorWorkTimeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorWorkTimeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motorWorkTimeTextActionPerformed

    private void maxDeviationGainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDeviationGainActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxDeviationGainActionPerformed

    private void maxDeviationAzActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDeviationAzActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxDeviationAzActionPerformed

    private void maxDeviationEI(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDeviationEI
        // TODO add your handling code here:
    }//GEN-LAST:event_maxDeviationEI

    private void testOptionListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testOptionListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testOptionListActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        int temp=Integer.valueOf(forwardText.getText());
        forwardValues=500*temp;
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        List<FlyCoordinates> flyCoordinates = new ArrayList<>();
        Thread t1 = new Thread( new Runnable(){
                    public void run(){
                                     startTCPServer();
                    }});
        t1.start();
        if("pause".equals(evt.getActionCommand())){
            playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/104-24.png"))); // NOI18N
            repaint();
            playButton.setActionCommand("resume");
            pause();
        }
        if("resume".equals(evt.getActionCommand())){
            playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/pause.png"))); //
            repaint();
            playButton.setActionCommand("pause");
            resume();
        }
        if("play".equals(evt.getActionCommand())) {
             lasttick = System.currentTimeMillis();
               if(airfanAddStatus!=true){
                    playButton.setActionCommand("pause");
                    playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/pause.png")));
                    CSVRW csvWriter=new CSVRW();
                        RouteDrawing routeDrawing =csvWriter.getRouteDettail(routeDesignPath);
                        int totalPoint=1;
                        for(RouteDetail routeDetail:routeDrawing.getRouteDetails()){
                            //CGS HOME
                            if(routeDetail.getComponentName().contains("cgshome1")){
                                Point point=new Point();
                                point.setLocation(routeDetail.getxPoint(),routeDetail.getyPoint());
                                p1=point;
                                startPoint=point;
                                cgspoint.add(point);
                            }else
                            if(routeDetail.getComponentName().contains("wayPoint")){
                                Point point=new Point();
                                point.setLocation(routeDetail.getxPoint(),routeDetail.getyPoint());
                                point.setLocation(routeDetail.getxPoint(),routeDetail.getyPoint());
                                if(p2==null){
                                    p2=point;
                                }else{
                                    p1=p2;
                                    p2=point;
                                }
                                //totalDistance=totalDistance+Utility.calcDistance(p1.getX(), p1.getY(), p2.getX(), p2.getY());
                                line2d = new Line2D.Double(p1,p2);
                                line2ds.add(line2d);
                                if(totalPoint==routeDrawing.getRouteDetails().size()){
                                    totalDistance=totalDistance+Utility.calcDistance(point.getX(), point.getY(), startPoint.getX(), startPoint.getY());
                                    line2ds.add(new Line2D.Double(point,startPoint));
                                }
                            }else{
                                Point point=new Point();
                                point.setLocation(routeDetail.getxPoint(),routeDetail.getyPoint());
                                cgspoint.add(point);
                            }
                            totalPoint=totalPoint+1;
                        }

            javax.swing.JLabel airfan = new javax.swing.JLabel();
            airfan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/ezgif-3-d99b3ee2a6.gif"))); // NOI18N
            airfan.setName("airfan");
            mapGride.add(airfan);
            airfanAddStatus=true;
            if(!line2ds.isEmpty()){
                 
               
                Thread t = new Thread( new Runnable(){
                    public void run(){
                        tick();
                      
                        playStartTime=Utility.getCurrentTime();
                        paytimedetails.setText(playStartTime); 
                        flightProgressBar.setStringPainted(true);
                        flightProgressBar.setVisible(true);
                        //int sizCount=;
                        for (Line2D line : line2ds) {
                              for (it = new LineIterator(line); it.hasNext();) {
                                synchronized (it) {
                                    if (!running) {
                                        break;
                                    }
                                    if (paused) {
                                        try {
                                            it.wait();
                                        } catch (InterruptedException ex) {
                                            break;
                                        }
                                        if (!running) { // running might have changed since we paused
                                            break;
                                        }
                                    }
                                }
                                Point2D current;
                                current = it.next();
                                int x1 = (int) current.getX();
                                int y1 = (int) current.getY();
                                //Dimension size = airfan.getPreferredSize();
                                airfan.setBounds(x1, y1-28,64, 64);
                               // flyCoordinates.add(new FlyCoordinates(Utility.getTile2lon(x1),Utility.getTile2lat(y1-28)));
                               // CSVRW.saveLiveRouteDetails(new FlyCoordinates(Utility.getTile2lon(x1),Utility.getTile2lat(y1-28)));                                
                               // System.out.println("Longitude"+Utility.getTile2lon(x1)+"Latitude"+);
                                
                                javax.swing.JLabel yellow = new javax.swing.JLabel();
                                yellow.setBounds(x1, y1, 9,9);
                                yellow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/yellow.jpg"))); // NOI18N
                                mapGride.add(yellow);
                                for(int i=0;i<=forwardValues;i++){
                                     tick();
                                     tile2lon=Utility.getTile2lon(x1);
                                     tile2lat=Utility.getTile2lat(y1-28);
                                     System.out.println("Longitude"+Utility.getTile2lon(x1)+"Latitude"+Utility.getTile2lat(y1-28));
                                }
                                repaint();
                            }
                        }
                       paytimedetails.setText(playStartTime+"/"+Utility.getCurrentTime());
                       playButton.setActionCommand("play");
                       playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/104-24.png")));
                       airfan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imges/engine.png")));
                    }
                });
                t.start();
            }
                  
        } 
       }
    }//GEN-LAST:event_playButtonActionPerformed
    private void tick() {
     //lock.lock();
        try {
            long now = System.currentTimeMillis();
            long delta = now - lasttick;
            lasttick = now;
            if (!paused) {
                elapsed += delta;
                displayTime(buildTime(elapsed));
            }
       } finally {
           // lock.unlock();
        }
    }
    
        //static ServerSocket variable
    private static ServerSocket server;
    //socket server port on which it will listen
    private static int port = 3333;
    
    public  void startTCPServer() {
        
         try{
         server = new ServerSocket(port);
         //keep listens indefinitely until receives 'exit' call or program terminates
          while(true){
            System.out.println("Waiting for client request");
            //creating socket and waiting for client connection
            Socket socket = server.accept();
            //read from socket to ObjectInputStream object
            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
            //convert ObjectInputStream object to String
            String message = (String) ois.readObject();
            System.out.println("Message Received: " + message);
            //create ObjectOutputStream object
            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
            String capitalizedSentence="";
           if("GET_GPS_INFO".equals(message))
                 capitalizedSentence ="Lat:"+tile2lat+" Lon:"+tile2lon; 
           if("GET_RSSI_CINR".equals(message))
                 capitalizedSentence ="RSSI_CINR"; 
            if("SET_LINK_DRAW".equals(message))
                 capitalizedSentence ="LINK_DRAW"; 
            if("GET_TRACKING_ANTENNA_INFO".equals(message))
                 capitalizedSentence ="TRACKING_ANTENNA_INFO"; 
            if("GET_SIMULATOR_TRACKING_ANTENNA_CALIBRATION".equals(message))
                 capitalizedSentence ="TRACKING_ANTENNA_CALIBRATION"; 
            if("GET_SIMULATOR_TRACKING_ANTENNA_INIT_PARAM".equals(message))
                 capitalizedSentence ="SIMULATOR_TRACKING_ANTENNA_INIT_PARAM"; 
            if("SET_TRACKING_ANTENNA_DIRECTION".equals(message))
                 capitalizedSentence ="TRACKING_ANTENNA_DIRECTION"; 
            if("SET_TRACKING_ANTENNA_TYPE".equals(message))
                 capitalizedSentence ="TRACKING_ANTENNA_TYPE"; 
            // outToClient.writeBytes(capitalizedSentence);
            //write object to Socket
            oos.writeObject(capitalizedSentence);
            //close resources
            ois.close();
            oos.close();
            socket.close();
            //terminate the server if client sends exit request
            if(message.equalsIgnoreCase("exit")) break;
        }
        System.out.println("Shutting down Socket server!!");
        //close the ServerSocket object
        server.close();
         }catch(Exception ex){
         
         }
    }
    private void displayTime(final String todisplay) {
               timeLeft.setText(todisplay);
                motorWorkTimeText.setText(todisplay);
     }
    private void forwardTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardTextActionPerformed
        // TODO add your handling code here
    }//GEN-LAST:event_forwardTextActionPerformed

    private void saverouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saverouteActionPerformed
         for(Component c : mapGride.getComponents()) {
                  if(c.getName()!=null&&c.getLocation().getX()!=0){
                            RouteDetail routeDetail=new RouteDetail();
                               if(c.getName().contains("cgshome")){
                                    JLabel  jLabel=(JLabel) c;  
                                    routeDetail.setComponentName(c.getName());
                                    routeDetail.setxPoint(c.getLocation().getX()+90);
                                    routeDetail.setyPoint(c.getLocation().getY()+140);
                                    routeDetail.setComponentText(jLabel.getText());
                               }
                              else{
                                if(c.getName().contains("wayPoint")) {
                                routeDetail.setComponentName(c.getName());
                                routeDetail.setxPoint(c.getLocation().getX()+32);
                                routeDetail.setyPoint(c.getLocation().getY()+32);
                                }
                           }
                        routeDetails.add(routeDetail);
                  }
             }
           if(!routeDetails.isEmpty()){
                JFileChooser fileChooser = new JFileChooser();
                add(fileChooser);
                fileChooser.setDialogTitle("Specify a file to save");
                int userSelection = fileChooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    fileToLocation = fileChooser.getSelectedFile();
                    CSVRW csvWriter=new CSVRW();
                    LinePoint linePoint=new LinePoint();
                    routeDesignPath=fileToLocation.getAbsolutePath()+".csv";
                    csvWriter.saveRouteDetails(routeDetails,routeDesignPath);
                    repaint();
                  }
            }        // TODO add your handling code here:
    }//GEN-LAST:event_saverouteActionPerformed

    private void loadTestListButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTestListButton1ActionPerformed
                    JFileChooser fileChooser = new JFileChooser();
                    add(fileChooser);
                    fileChooser.setDialogTitle("Specify a file to open");
                    fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                    fileChooser.setFileFilter(new FileNameExtensionFilter("csv","csv"));
                    int userSelection = fileChooser.showOpenDialog(null);
                    if (userSelection == JFileChooser.APPROVE_OPTION) {
                        fileToLocation= fileChooser.getSelectedFile();
                        CSVRW csvWriter=new CSVRW();
                        testListFilePath=fileChooser.getSelectedFile().getPath();
                        simuTestSettings=csvWriter.getSimuTestSettingList(testListFilePath);
                        loadTestList(simuTestSettings);
                        testliststatus=false;
                    }
    }//GEN-LAST:event_loadTestListButton1ActionPerformed
  private void loadTestList(List<SimuTestSetting> simuTestSettings){
     List<String> testList=new ArrayList<>();
      if(!simuTestSettings.isEmpty()){
          simuTestSettings.forEach((simuTestSetting) -> {
             testList.add(simuTestSetting.getTestSettingName());
          }); 
          String[] arr = new String[testList.size()];
          testListdata.setListData(testList.toArray(arr));
        }
      
  }
    private void forwardTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_forwardTextKeyPressed
      
    }//GEN-LAST:event_forwardTextKeyPressed

    private void forwardTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_forwardTextKeyTyped
        // TODO add your handling code here:
        char enter = evt.getKeyChar();
            if(!(Character.isDigit(enter))){
                evt.consume();
            }
    }//GEN-LAST:event_forwardTextKeyTyped

    private void maxDeviationEIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxDeviationEIKeyTyped
      // TODO add your handling code here:
        char enter = evt.getKeyChar();
            if(!(Character.isDigit(enter))){
                evt.consume();
            }
    }//GEN-LAST:event_maxDeviationEIKeyTyped

    private void maxDeviationAzKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxDeviationAzKeyTyped
          // TODO add your handling code here:
         char enter = evt.getKeyChar();
            if(!(Character.isDigit(enter))){
                evt.consume();
            }
    }//GEN-LAST:event_maxDeviationAzKeyTyped

    private void maxDeviationGainKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxDeviationGainKeyTyped
        // TODO add your handling code here:
        // TODO add your handling code here:
        char enter = evt.getKeyChar();
            if(!(Character.isDigit(enter))){
                evt.consume();
            }
    }//GEN-LAST:event_maxDeviationGainKeyTyped

    private void maxSensitivityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxSensitivityActionPerformed
        
    }//GEN-LAST:event_maxSensitivityActionPerformed

    private void testListdataValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_testListdataValueChanged
        if(null!=testListdata.getSelectedValue()){
          String selected = testListdata.getSelectedValue();
          simuTestSettings.stream().filter((simuTestSetting) -> (simuTestSetting.getTestSettingName().equals(selected))).map((simuTestSetting) -> {
              if(null!=simuTestSetting.getForwardX()){
                  forwardText.setText(simuTestSetting.getForwardX()+"");
              }
                return simuTestSetting;
            }).map((simuTestSetting) -> {
                if(null!=simuTestSetting.getGCSAntenna()){
                    gcsAntenna.setSelectedItem(simuTestSetting.getGCSAntenna());
                }
                return simuTestSetting;
            }).map((simuTestSetting) -> {
                if(null!=simuTestSetting.getADTAntenna()){
                    adtAntennaComboBox.setSelectedItem(simuTestSetting.getADTAntenna());
                }
                return simuTestSetting;
            }).map((simuTestSetting) -> {
                if(null!=simuTestSetting.getMaxDeviationAz()){
                    maxDeviationAz.setText(simuTestSetting.getMaxDeviationAz()+"");
                }
                return simuTestSetting;
            }).map((simuTestSetting) -> {
                if(null!=simuTestSetting.getMaxDeviationEl()){
                    maxDeviationEI.setText(simuTestSetting.getMaxDeviationEl()+"");
                }
                return simuTestSetting;
            }).map((simuTestSetting) -> {
                if(null!=simuTestSetting.getMaxDeviationGa()){
                    maxDeviationGain.setText(simuTestSetting.getMaxDeviationGa()+"");
                }
                return simuTestSetting;
            }).map((simuTestSetting) -> {
                if(null!=simuTestSetting.getMaxDeviationEl()){
                    maxDeviationEI.setText(simuTestSetting.getMaxDeviationEl()+"");
                }
                return simuTestSetting;
            }).filter((simuTestSetting) -> (null!=simuTestSetting.getMaxSensitivity())).forEachOrdered((simuTestSetting) -> {
                maxSensitivity.setText(simuTestSetting.getMaxSensitivity()+"");
            });
       }
    }//GEN-LAST:event_testListdataValueChanged

    private void forwardButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButton1ActionPerformed
                stop();       // TODO add your handling code here:
    }//GEN-LAST:event_forwardButton1ActionPerformed
    private static final String buildTime(final long elapsed) {
        long hundredths = elapsed / 10;
        long seconds = hundredths / 100;
        long minutes = seconds / 60;
        long hours = minutes / 60;
        return String.format("%02d:%02d:%02d:%02d", hours, minutes % 60, seconds % 60, hundredths % 100);
    } 
    
    public static void main(String args[]) {
        try {
                JTextField xField = new JTextField(5);
                JTextField yField = new JTextField(5);

                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("High(KM):"));
                xField.setText("40");
                myPanel.add(xField);
                myPanel.add(Box.createHorizontalStrut(15)); // a spacer
                myPanel.add(new JLabel("Width(KM):"));
                yField.setText("40");
                myPanel.add(yField);
                int result = JOptionPane.showConfirmDialog(null, myPanel,"Please Enter", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                   System.out.println("High value: " + xField.getText());
                   System.out.println("Width value: " + yField.getText());
                }
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                          if ("Nimbus".equals(info.getName())) {
                              javax.swing.UIManager.setLookAndFeel(info.getClassName());
                              break;
                          }
                       }

                  } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
                      java.util.logging.Logger.getLogger(TNSimulationApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                  }
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            TNSimulationApp   frame =new TNSimulationApp();
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            frame.setLocationRelativeTo(null);
            frame.setExtendedState(MAXIMIZED_BOTH);
            frame.setVisible(true);
                       
           }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> adtAntennaComboBox;
    private javax.swing.JProgressBar flightProgressBar;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton forwardButton1;
    private javax.swing.JTextField forwardText;
    private javax.swing.JComboBox<String> gcsAntenna;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadTestListButton1;
    private javax.swing.JButton loadroute;
    private static javax.swing.JPanel mapGride;
    private javax.swing.JTextField maxDeviationAz;
    private javax.swing.JTextField maxDeviationEI;
    private javax.swing.JTextField maxDeviationGain;
    private javax.swing.JTextField maxSensitivity;
    private javax.swing.JTextField motorWorkTimeText;
    private javax.swing.JLabel paytimedetails;
    private javax.swing.JButton playButton;
    private javax.swing.JButton saveTestList;
    private javax.swing.JButton saveroute;
    private javax.swing.JLabel startstoptime;
    private javax.swing.JList<String> testListdata;
    private javax.swing.JComboBox<String> testOptionList;
    private javax.swing.JPanel testPlayerPan;
    private javax.swing.JTextField timeLeft;
    private javax.swing.JPanel tnssettings;
    // End of variables declaration//GEN-END:variables

}
